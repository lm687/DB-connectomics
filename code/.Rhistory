rm(list = ls())
library(neuprintr)
library(reshape2)
library(ggplot2)
library(dplyr)
theme_set(theme_bw())
neuprint_dataset = "hemibrain:v1.0"
datasets_neuprint <- neuprint_datasets()
datasets_neuprint$`hemibrain:v1.2.1`$ROIs
datasets_neuprint$`hemibrain:v1.2.1`$superLevelROIs
neurons_per_region <- lapply(unique(datasets_neuprint$`hemibrain:v1.2.1`$ROIs),
function(i) try(neuprintr::neuprint_find_neurons(input_ROIs = i)))
neurons_per_region_summary <- sapply(neurons_per_region, function(i) try(table(i$bodytype)))
names(neurons_per_region_summary) <- unique(datasets_neuprint$`hemibrain:v1.2.1`$ROIs)
setwd("~/Documents/projects/connectomics/code/")
saveRDS(neurons_per_region, "../data/neurons_per_region.RDS")
system("mkdir ../data/")
saveRDS(neurons_per_region, "../data/neurons_per_region.RDS")
neurons_per_region_summary <- sapply(neurons_per_region, function(i) try(table(i$bodytype)))
names(neurons_per_region_summary) <- unique(datasets_neuprint$`hemibrain:v1.2.1`$ROIs)
table(sapply(neurons_per_region_summary, typeof))
neurons_per_region_summary <- neurons_per_region_summary[sapply(neurons_per_region_summary, typeof) != 'character']
first_col_to_rownames <- function(i){
rownames(i) <- i[,1]
i[,-1]
}
NA_are_zero <- function(i){
i[is.na(i)] <- 0
i
}
normalise_rw <- function(i){
sweep(i, 1, rowSums(i), '/')
}
neurons_per_region_matrix <- NA_are_zero(first_col_to_rownames(dcast(melt(neurons_per_region_summary), Var1~L1, value.var='value')))
neurons_per_region_summary_ph <- pheatmap::pheatmap(normalise_rw(1+neurons_per_region_matrix))
neurons_per_region_summary_ph_bin <- pheatmap::pheatmap(apply((neurons_per_region_matrix)>0, 1, as.numeric))
neurons_per_region_summary_ph
neurons_per_region_summary_matrix_collapse <-
neurons_per_region_summary_ph_bin_collapse=
ggplot(melt(neurons_per_region_summary), aes(x=factor(Var1, levels=neurons_per_region_summary_ph$tree_row$labels[neurons_per_region_summary_ph$tree_row$order]),
y=factor(L1, neurons_per_region_summary_ph$tree_col$labels[neurons_per_region_summary_ph$tree_col$order]), fill=value))+
geom_tile()
neurons_per_region_norm <- melt(as(normalise_rw(neurons_per_region_matrix), 'matrix')) %>% filter(value > 0)
neurons_per_region_summary_melt <- melt(neurons_per_region_summary)
to_named_vector <- function(i){
.x <- unlist(i[,2])
names(.x) <- unlist(i[,1])
.x
}
neurons_per_region_summary_melt_abundance <- to_named_vector(neurons_per_region_summary_melt %>% group_by(Var1) %>% dplyr::summarise(count_neuron_type=sum(value)))
neurons_per_region_summary_melt_abundance_norm <- to_named_vector(neurons_per_region_summary_melt %>% group_by(Var1) %>% dplyr::summarise(count_neuron_type=sum(value)))/sum(neurons_per_region_summary_melt$value)
neurons_per_region_summary_melt_abundance_norm <- sort(neurons_per_region_summary_melt_abundance_norm, decreasing = T)[1:100]
ggplot(cbind.data.frame(count=neurons_per_region_summary_melt_abundance_norm, name=names(neurons_per_region_summary_melt_abundance_norm)),
aes(x=factor(name, levels=names(sort(neurons_per_region_summary_melt_abundance_norm))), y=count))+geom_line(aes(group=1))+
scale_y_continuous(trans = 'log2')+  theme(axis.text.x = element_text(angle = 30, hjust=1))
## get a clustered dataset, or sets of clusters
clusters <- readRDS("~/Desktop/clusters_npc10_res0p2.RDS")
plot(cbind(clusters=as.vector(table(clusters)/length(clusters)),
neuprint_cell_types=as.vector(neurons_per_region_summary_melt_abundance_norm[1:length(unique(clusters))])), type='l')
abline(coef=c(0,1))
vec1 <- as.vector(table(clusters)/length(clusters))
vec2 <- as.vector(neurons_per_region_summary_melt_abundance_norm[1:length(unique(clusters))])
n=1
m=length(vec1)
h=length(vec2)
max_h_m <- max(c(m,h))
adj_matrix <- matrix(0, nrow=m, ncol=h)
diag(adj_matrix) <- 1
adj_matrix
nits <- 1000
dists <- rep(NA, nits)
install.packages('transport')
library(transport)
transport::wasserstein(vec1, vec2)
transport::wasserstein(vec1, vec2, costm = adj_matrix <- matrix(0, nrow=m, ncol=h))
vec1
vec2
transport::wasserstein(c(1-sum(vec1), vec1), c(1-sum(vec2), vec2),
costm = adj_matrix <- matrix(0, nrow=m, ncol=h))
length(c(1-sum(vec2), vec2))
length((1-sum(vec1), vec1))
length(c(1-sum(vec1), vec1))
transport::wasserstein(c(1-sum(vec1), vec1), c(1-sum(vec2), vec2),
costm = adj_matrix <- matrix(0, nrow=m, ncol=h))
transport::wasserstein(c(1-sum(vec1), vec1), c(1-sum(vec2), vec2),
costm = matrix(0, nrow=m, ncol=h))
transport::wasserstein(c(1-sum(vec1), vec1), c(1-sum(vec2), vec2),
costm = rep(0, 14))
transport::wasserstein(c(1-sum(vec1), vec1), c(1-sum(vec2), vec2),
costm = matrix(0, nrow=m+1, ncol=h+1))
transport::wasserstein(c(1-sum(vec1), vec1), c(1-sum(vec2), vec2),
costm = matrix(1, nrow=m+1, ncol=h+1))
res_OT <- transport::wasserstein(c(1-sum(vec1), vec1), c(1-sum(vec2), vec2),
costm = matrix(1, nrow=m+1, ncol=h+1))
res_OT
chrimson <- readRDS("~/Desktop/chrimson_dataset_integrated.RDS")
library(Seurat)
UMAPPlot(chrimson)
DefaultAssay(chrimson)
chrimson <- RunPCA(chrimson)
chrimson <- RunUMAP(chrimson)
ElbowPlot(chrimson)
chrimson <- RunUMAP(chrimson, dims = 1:16)
UMAPPlot(chrimson)
FeaturePlot(chrimson, features = 'prt')
FeaturePlot(chrimson, features = 'ey')
FeaturePlot(chrimson, features = 'mamo')
FeaturePlot(chrimson, features = 'DAT') ## alpha'/beta' is the cluster below
cluster <- readRDS("~/Desktop/clusters_npc10_res0p2.RDS")
chrimson$cluster <- cluster
cluster
Idents(chrimson) <- cluster
UMAPPlot(chrimson)
RenameIdents(chrimson, "6" = "KC other")
RenameIdents(chrimson, "6" = "KC other", "5" = "KC a/b prime")
chrimson <- RenameIdents(chrimson, "6" = "KC other", "5" = "KC a/b prime")
subset(chrimson, cells=rownames(chrimson[[Idents(chrimson) == 'KC other']]))
UMAPPlot(chrimson)
UMAPPlot(chrimson)+scale_color_manual(values = c("#a8dadc","#457b9d","#1d3557",
"#f4f1de","#e07a5f","#3d405b","#81b29a","#f2cc8f",
"#f72585","#7209b7","#3a0ca3","#4361ee","#4cc9f0"))
UMAPPlot(chrimson)+scale_color_manual(values = c("#a8dadc","#457b9d","#1d3557",
"#f4f1de","#e07a5f","#81b29a","#f2cc8f",
"#f72585","#7209b7","#3a0ca3","#4361ee","#4cc9f0"))
UMAPPlot(chrimson)+scale_color_manual(values = c("#a8dadc","#457b9d","#1d3557",
"#f4f1de","#e07a5f","#81b29a","#f2cc8f",
"#f72585","#7209b7","#3a0ca3","#4361ee","#4cc9f0", "yellow"))
UMAPPlot(chrimson)+scale_color_manual(values = c("#e07a5f","#f72585","#a8dadc","#457b9d","#1d3557",
"#f4f1de","#81b29a","#f2cc8f",
"#7209b7","#3a0ca3","#4361ee","#4cc9f0", "yellow"))
KC1 <- subset(chrimson, cells=rownames(chrimson[[Idents(chrimson) == 'KC other']]))
rownames(chrimson[[Idents(chrimson) == 'KC other']])
Idents(chrimson)
KC1 <- subset(chrimson, cells=names(Idents(chrimson) == 'KC other'))
KCalphabetaprime <- subset(chrimson, cells=names(Idents(chrimson) == 'KC a/b prime'))
UMAPPlot(KC1)
KC1 <- RunPCA(KC1)
ElbowPlot(KCalphabetaprime)
ElbowPlot(KC1)
KC1 <- RunUMAP(KC1, dims = 1:16)
KCalphabetaprime <- subset(chrimson, cells=names(Idents(chrimson) == 'KC a/b prime'))
KCalphabetaprime <- RunPCA(KCalphabetaprime)
ElbowPlot(KCalphabetaprime)
KCalphabetaprime <- RunUMAP(KCalphabetaprime, dims = 1:16)
UMAPPlot(KCalphabetaprime)
UMAPPlot(KC1)
UMAPPlot(KCalphabetaprime)
KC1
KCalphabetaprime
names(Idents(chrimson) == 'KC other')
Idents(chrimson) == 'KC other')
Idents(chrimson) == 'KC other'
Idents(chrimson)
Idents(chrimson) == 'KC a/b prime'
names(Idents(chrimson) == 'KC a/b prime')[Idents(chrimson) == 'KC a/b prime']
names(Idents(chrimson)[Idents(chrimson) == 'KC a/b prime']
names(Idents(chrimson))[Idents(chrimson) == 'KC a/b prime']
KC1 <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == 'KC other']
KC1 <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == 'KC other'])
KC1 <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == 'KC other'])
KC1 <- RunPCA(KC1)
ElbowPlot(KC1)
KC1 <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == 'KC other'])
KC1 <- RunPCA(KC1)
ElbowPlot(KC1)
KC1 <- RunUMAP(KC1, dims = 1:4)
KCalphabetaprime <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == 'KC a/b prime'])
KCalphabetaprime <- RunPCA(KCalphabetaprime)
ElbowPlot(KCalphabetaprime)
KCalphabetaprime <- RunUMAP(KCalphabetaprime, dims = 1:16)
UMAPPlot(KCalphabetaprime)
UMAPPlot(KC1)
UMAPPlot(KCalphabetaprime)
cowplot::plot_grid(UMAPPlot(KC1),
UMAPPlot(KCalphabetaprime))
FeaturePlot(chrimson, features = 'prt') ## in two KC clusters
cowplot::plot_grid(FeaturePlot(KC1, features = 'prt'),
FeaturePlot(KCalphabetaprime, features = 'prt'))
KC1[c('VAChT','VGlut', 'Gad1', 'prt')]
KC1[c('VAChT','VGlut', 'Gad1', 'prt'),]
KC1@assays$RNA@counts[c('VAChT','VGlut', 'Gad1', 'prt'),]
pheatmap::pheatmap(KC1@assays$RNA@counts[c('VAChT','VGlut', 'Gad1', 'prt'),])
library(pheatmap)
pheatmap::pheatmap(KC1@assays$RNA@counts[c('VAChT','VGlut', 'Gad1', 'prt'),], show_rownames = F)
pheatmap::pheatmap(KC1@assays$RNA@counts[c('VAChT','VGlut', 'Gad1', 'prt'),], show_rownames = F, show_colnames = F)
pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),], show_rownames = F, show_colnames = F)
pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),], show_rownames = T, show_colnames = F)
KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),]
pheatmap::pheatmap(cbind(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),]),
show_rownames = T, show_colnames = F)
pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)
pheatmap::pheatmap(KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)
pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)
FeaturePlot_bool <- function(seurat_obj, bool, title, ...){
seurat_obj[[]]$x <- bool
FeaturePlot(seurat_obj, features = 'x', ...)+ggtitle(title)
}
chrimson@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),]
chrimson@assays$RNA@data[c('VAChT','VGlut', 'Gad1'),]
chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]
colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),])
( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 )
chrimson@assays$RNA@counts[c('prt'),] > 1
( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1)
FeaturePlot_bool(chrimson, bool=( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1))
FeaturePlot_bool(chrimson, bool=( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
seurat_obj=chrimson
bool=( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1); title= 'Only prt'
seurat_obj[[]]$x <- bool
seurat_obj[[]][,'x'] <- bool
seurat_obj@meta.data[,'x'] <- bool
FeaturePlot_bool <- function(seurat_obj, bool, title, ...){
seurat_obj@meta.data[,'x'] <- bool
FeaturePlot(seurat_obj, features = 'x', ...)+ggtitle(title)
}
FeaturePlot_bool(chrimson, bool=( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
cowplot::plot_grid(FeaturePlot(KC1, features = 'prt'),
FeaturePlot(KCalphabetaprime, features = 'prt'))
FeaturePlot(chrimson, features = 'prt') ## in two KC clusters
FeaturePlot_bool(chrimson, bool=( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
FeaturePlot_bool(KCalphabetaprime, bool=( colSums(KCalphabetaprime@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (KCalphabetaprime@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
FeaturePlot_bool(KC1, bool=( colSums(KC1@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (KC1@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
markers <- readRDS("~/Desktop/markers_npc10_res0p2.RDS")
markers
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 2, wt = avg_log2FC)
Idents(chrimson)
table(Idents(chrimson))
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 2, wt = avg_log2FC) %>% filter(cluster %in% c(5,6) )
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6) )
rm(list = ls())
library(Seurat)
library(pheatmap)
chrimson <- readRDS("~/Desktop/chrimson_dataset_integrated.RDS")
cluster <- readRDS("~/Desktop/clusters_npc10_res0p2.RDS")
markers <- readRDS("~/Desktop/markers_npc10_res0p2.RDS")
DefaultAssay(chrimson)
ElbowPlot(chrimson)
chrimson <- RunUMAP(chrimson, dims = 1:16)
UMAPPlot(chrimson)
FeaturePlot(chrimson, features = 'prt') ## in two KC clusters
FeaturePlot(chrimson, features = 'ey') ## the two KC groups
VlnPlot(chrimson, features = 'prt')
chrimson$cluster <- cluster
Idents(chrimson) <- cluster
VlnPlot(chrimson, features = 'prt')
FeaturePlot(chrimson, features = 'ey') ## the two KC groups
VlnPlot(chrimson, features = 'ey')
FeaturePlot(chrimson, features = 'mamo') ## alpha'/beta' is cluster below
VlnPlot(chrimson, features = 'mamo')
FeaturePlot(chrimson, features = 'DAT') ## alpha'/beta' is cluster below
VlnPlot(chrimson, features = 'mamo')
VlnPlot(chrimson, features = 'DAT')
VlnPlot(chrimson, features = 'mamo')
FeaturePlot(chrimson, features = 'ey') ## the two KC groups
VlnPlot(chrimson, features = 'ey')
VlnPlot(chrimson, features = 'prt')
chrimson <- RenameIdents(chrimson, "5" = "5 - KC other", "6" = "6 - KC a/b prime")
UMAPPlot(chrimson)+scale_color_manual(values = c("#e07a5f","#f72585","#a8dadc","#457b9d","#1d3557",
"#f4f1de","#81b29a","#f2cc8f",
"#7209b7","#3a0ca3","#4361ee","#4cc9f0", "yellow"))
KC1 <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == 'KC other'])
KC1 <- RunPCA(KC1)
ElbowPlot(KC1)
KC1 <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == '5 - KC other'])
KC1 <- RunPCA(KC1)
ElbowPlot(KC1)
KC1 <- RunUMAP(KC1, dims = 1:6)
KCalphabetaprime <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == 'KC a/b prime'])
KCalphabetaprime <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) == '6 - KC a/b prime'])
KCalphabetaprime <- RunPCA(KCalphabetaprime)
ElbowPlot(KCalphabetaprime)
KCalphabetaprime <- RunUMAP(KCalphabetaprime, dims = 1:16)
UMAPPlot(KCalphabetaprime)
cowplot::plot_grid(UMAPPlot(KC1),
UMAPPlot(KCalphabetaprime))
cowplot::plot_grid(FeaturePlot(KC1, features = 'prt'),
FeaturePlot(KCalphabetaprime, features = 'prt'))
pheatmap::pheatmap(KC1@assays$RNA@counts[c('VAChT','VGlut', 'Gad1', 'prt'),], show_rownames = T, show_colnames = F)
pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),], show_rownames = T, show_colnames = F)
pheatmap::pheatmap(cbind(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),]),
show_rownames = T, show_colnames = F)
pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)
pheatmap::pheatmap(KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)
cowplot::plot_grid(pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F),
pheatmap::pheatmap(KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F))
xxxx <- KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
xxxx <- pheatmap(KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)
xxxx$gtable
table(xxxx$gtable)
plot(xxxx$gtable)
cowplot::plot_grid(pheatmap::pheatmap(KC1@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)$gtable,
pheatmap::pheatmap(KCalphabetaprime@assays$RNA@data[c('VAChT','VGlut', 'Gad1', 'prt'),],
show_rownames = T, show_colnames = F)$gtable)
KC1
KCalphabetaprime
FeaturePlot_bool <- function(seurat_obj, bool, title, ...){
seurat_obj@meta.data[,'x'] <- bool
FeaturePlot(seurat_obj, features = 'x', ...)+ggtitle(title)
}
FeaturePlot_bool(chrimson, bool=( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
FeaturePlot_bool(KCalphabetaprime, bool=( colSums(KCalphabetaprime@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (KCalphabetaprime@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
FeaturePlot_bool(KC1, bool=( colSums(KC1@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (KC1@assays$RNA@counts[c('prt'),] > 1), 'Only prt')
( colSums(chrimson@assays$RNA@counts[c('VAChT','VGlut', 'Gad1'),]) == 0 ) & (chrimson@assays$RNA@counts[c('prt'),] > 1)
chrimson@assays$RNA@data[c('VAChT','VGlut', 'Gad1'),]
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 2, wt = avg_log2FC)
table(Idents(chrimson))
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6) )
FeaturePlot(chrimson, features = 'Nep1')
FeaturePlot(chrimson, features = c('Nep1', 'crb'))
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb')), UMAP(chrimson))
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb')), UMAPPlot(chrimson))
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb', 'Dunce')), UMAPPlot(chrimson))
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb', 'dnc')), UMAPPlot(chrimson))
DefaultAssay(chrimson) <- 'RNA'
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb', 'dnc')), UMAPPlot(chrimson))
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb', 'dnc', 'rut')), UMAPPlot(chrimson))
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb', 'tur', 'rut')), UMAPPlot(chrimson))
cowplot::plot_grid(FeaturePlot(chrimson, features = c('Nep1', 'crb', 'rut')), UMAPPlot(chrimson))
FeaturePlot(chrimson, features = 'mub') ## the two KC groups: clusters 5 and 6
VlnPlot(chrimson, features = 'mub')
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6,11) )
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6,11) )
## crb was in the chrimson dataset!
markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6,11) )
KC_subset <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) %in% c('5 - KC other',
'6 - KC a/b prime',
'11 - KC other 2')])
KC_subset
DoHeatmap(KC_subset, features = markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6,11) ))
KC_subset <- ScaleData(KC_subset)
DoHeatmap(KC_subset, features = markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6,11) ))
KC_subset <- FindVariableFeatures(KC_subset)
VariableFeatures(KC_subset)
KC_subset <- FindVariableFeatures(KC_subset)[1:10]
KC_subset <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) %in% c('5 - KC other',
'6 - KC a/b prime',
'11 - KC other 2')])
KC_subset <- ScaleData(KC_subset)
KC_subset <- FindVariableFeatures(KC_subset)
FindVariableFeatures(KC_subset)[1:10]
VariableFeatures(KC_subset)[1:10]
DoHeatmap(KC_subset, features = markers %>% VariableFeatures(KC_subset)[1:10])
DoHeatmap(KC_subset, features = VariableFeatures(KC_subset)[1:10])
chrimson <- RenameIdents(chrimson, "5" = "5 - KC other", "6" = "6 - KC a/b prime",
"11" = "11 - KC other 2")
KC_subset <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) %in% c('5 - KC other',
'6 - KC a/b prime',
'11 - KC other 2')])
KC_subset <- ScaleData(KC_subset)
KC_subset <- FindVariableFeatures(KC_subset)
DoHeatmap(KC_subset, features = markers %>% dplyr::group_by(cluster) %>% dplyr::top_n(n = 4, wt = avg_log2FC) %>% filter(cluster %in% c(5,6,11) ))
DoHeatmap(KC_subset, features = VariableFeatures(KC_subset)[1:10])
Idents(chrimson)
chrimson <- RenameIdents(chrimson, "5" = "5 - KC other", "6" = "6 - KC a/b prime",
"11" = "11 - KC other 2")
chrimson <- RenameIdents("11" = "11 - KC other 2")
chrimson <- RenameIdents(chrimson, "11" = "11 - KC other 2")
KC_subset <- subset(chrimson, cells=names(Idents(chrimson))[Idents(chrimson) %in% c('5 - KC other',
'6 - KC a/b prime',
'11 - KC other 2')])
KC_subset <- ScaleData(KC_subset)
KC_subset <- FindVariableFeatures(KC_subset)
DoHeatmap(KC_subset, features = VariableFeatures(KC_subset)[1:10])
chrimson
Idents(chrimson)
table(v)
table(Idents(chrimson))
markers_1_2 <- FindMarkers(chrimson, ident.1 = '6 - KC a/b prime', ident.2 = '5 - KC other')
markers_1_2
head(markers_1_2)
table(Idents(chrimson))
markers_1_3 <- FindMarkers(chrimson, ident.1 = '6 - KC a/b prime', ident.2 = '11 - KC other 2')
head(markers_1_3)
markers_1_2
head(markers_1_2)
head(markers_1_2)$gene
rownames(head(markers_1_2))
DoHeatmap(KC_subset, features = c(rownames(head(markers_1_2)),
rownames(head(markers_1_3))))
DoHeatmap(KC_subset, features = c(rownames(head(markers_1_2)),
rownames(head(markers_1_3)),
'Hr38', 'sr', 'ey'))
DoHeatmap(KC_subset, features = c('Hr38', 'sr', 'ey'))
FeaturePlot(chrimson, features = c('Hr38', 'sr', 'ey'))
DoHeatmap(chrimson, features = c('Hr38', 'sr', 'ey'))
DoHeatmap(KC_subset, features = c('Hr38', 'sr', 'ey', 'prt'))
FeaturePlot(chrimson, features = c('Hr38', 'sr', 'ey', 'prt'))
arg_A <- c(3,2,1,1)
arg_A <- c(4,2,1,1)
arg_T <- c(2,1,2,3)
stopifnot(sum(arg_A) == sum(arg_T))
adj <- matrix(0, nrow=length(arg_A), ncol=length(arg_B))
adj <- matrix(0, nrow=length(arg_A), ncol=length(arg_T))
adj[1,1] <- adj[1,2] <- adj[2,3] <- adj[3,4] <- adj[4,4] <- 1
t(arg_A). %*% adj
t(arg_A) %*% adj
(t(arg_A) %*% adj)-arg_T
(t(arg_A) %*% adj)
arg_T
adj <- adj2 <- matrix(0, nrow=length(arg_A), ncol=length(arg_T))
adj <- adj2 <- matrix(0, nrow=length(arg_A), ncol=length(arg_T))
adj[1,1] <- adj[1,2] <- adj[2,3] <- adj[3,4] <- adj[4,4] <- 1
adj2[1,1] <- adj2[1,2] <- adj2[2,3] <- adj2[3,4] <- adj2[4,4] <- 1
(t(arg_A) %*% adj)-arg_T
(t(arg_A) %*% adj2)-arg_T
adj2[1,1] <- adj2[1,3] <- adj2[2,4] <- adj2[3,2] <- adj2[4,4] <- 1
(t(arg_A) %*% adj)-arg_T ## correct solution
(t(arg_A) %*% adj2)-arg_T ## incorrect solution
(t(arg_A) %*% adj)
arg_T
(t(arg_A) %*% adj)-arg_T ## correct solution
(t(arg_A) %*% adj)
arg_T
adj
adj2
adj <- adj2 <- matrix(0, nrow=length(arg_A), ncol=length(arg_T))
adj[1,1] <- adj[1,2] <- adj[2,3] <- adj[3,4] <- adj[4,4] <- 1
adj2[1,1] <- adj2[1,3] <- adj2[2,4] <- adj2[3,2] <- adj2[4,4] <- 1
(t(arg_A) %*% adj)-arg_T ## correct solution
(t(arg_A) %*% adj2)-arg_T ## incorrect solution
adj2[1,1] <- adj2[1,3] <- adj2[2,4] <- adj2[3,2] <- adj2[4,4] <- 1
adj <- adj2 <- matrix(0, nrow=length(arg_A), ncol=length(arg_T))
adj[1,1] <- adj[1,2] <- adj[2,3] <- adj[3,4] <- adj[4,4] <- 1
adj2[1,1] <- adj2[1,3] <- adj2[2,4] <- adj2[3,2] <- adj2[4,4] <- 1
adj2
adj <- adj2 <- matrix(0, nrow=length(arg_A), ncol=length(arg_T))
adj[1,1] <- adj[1,3] <- adj[2,4] <- adj[3,2] <- adj[4,4] <- 1
adj2[1,1] <- adj2[1,3] <- adj2[2,4] <- adj2[3,2] <- adj2[4,4] <- 1
(t(arg_A) %*% adj)-arg_T ## correct solution
(t(arg_A) %*% adj2)-arg_T ## incorrect solution
adj2
arg_T
t(arg_T)
t(arg_T) %*% adj
arg_A
arg_T
t(arg_T) %*% adj
t(arg_T) %*% t(adj)
arg_A
arg_T
t(arg_T) %*% t(adj)
arg_A
t(arg_T)
t(adj)
adj
(t(arg_A) %*% adj)
t(arg_T) %*% t(adj)
(t(arg_A) %*% adj)-arg_T ## correct solution
(t(arg_A) %*% adj)
arg_T
t(arg_T) %*% t(adj)
t(arg_T) %*% t(adj) - arg_A
t(arg_T) %*% t(adj) - arg_A
(t(arg_A) %*% adj)-arg_T
((t(arg_T) %*% t(adj) - arg_A) == 0) | ( ((t(arg_A) %*% adj)-arg_T ) == 0)
browseVignettes("fgsea")
